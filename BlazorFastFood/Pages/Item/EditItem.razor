@page "/item/edit/{itemid:int}"
@inject IItemService db
@inject ICategoryService db1
@inject NavigationManager nav
@inject IJSRuntime _jsrun
<div class="summary">
<h3>Edit Item</h3>
@if (cat.ImageUrl != null)
{
    <img src="@cat.ImageUrl" class="imgg" />
}


 <GroupBox title="Add New Item"style="margin-top: 1.5rem">

        <div class="row g-3">
            <div class="col-12 col-sm-6">
                <span>Product Name</span>
                <BootstrapInput TValue="string" Color="Color.Primary" @bind-Value="@cat.ProdName" />
            </div>
            <div class="col-12 col-sm-6">
                <span>Image Url</span>
                <BootstrapInput TValue="string" Color="Color.Info" @bind-Value="@cat.ImageUrl"/>
            </div>
            <div class="col-12 col-sm-6">
                <span>Price(Rs.)</span>
                <BootstrapInput TValue="int" Color="Color.Warning" @bind-Value="@cat.Price"/>
            </div>
            <div class="col-12 col-sm-6">
                <span>Description</span>
                <BootstrapInput TValue="string" Color="Color.Danger" @bind-Value="@cat.Description"/>
            </div>
        </div>
        <br/>

        <EditForm Model="c">
            <lable>Select Category</lable>
            <InputSelect @bind-Value="cat.CategoryId" class="form-control">
                <option value="0" disabled="disabled" selected>--Select Category--</option>
                @foreach (var i in c)
                {
                    <option value="@i.Id">@i.Name</option>
                }
            </InputSelect>
        </EditForm>
    </GroupBox>





        <div class="form-group py-2">
            <button class="btn btn-success" @onclick="Edit">Save Changes</button>
            <NavLink href="category/categoryList" class="btn btn-secondary">Back</NavLink>
        </div>
  
</div>

@code {
    [Parameter]
    public int itemid { get; set; }
    private Item cat { get; set; } = new Item();
    private List<Category> c = new List<Category>();
    string das = Authorize.getusertype();
    protected async override Task OnInitializedAsync()
    {
        if(das.Equals("Admin"))
        {
            cat = await db.GetItemById(itemid);
            c = await db1.GetAllCategories();
        }
        else
        {
            nav.NavigateTo("login/register");
        }


    }
    private async void Edit()
    {
        if(das.Equals("Admin"))
        {
            var d = await db.EditItem(cat);
            if(d==true)
            {
                await _jsrun.InvokeVoidAsync("ShowToastr", "success", "Edit successful!");
            }
            nav.NavigateTo("category/categoryList");
        }
        else
        {
            await _jsrun.InvokeVoidAsync("ShowToastr", "error", "Register or Login first!");
            nav.NavigateTo("login/register");
        }

    }
}

